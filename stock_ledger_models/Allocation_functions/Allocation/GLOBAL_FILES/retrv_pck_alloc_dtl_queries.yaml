retreive_pack_alloc_dtl:
  C_temp_tbl1: "CREATE TEMPORARY TABLE IF NOT EXISTS alloc_item_header_temp
               (ALLOC_NO                    NUMERIC(15),    
                SOURCE_ITEM                 VARCHAR(25),  
                SOURCE_ITEM_DESC            VARCHAR(250), 
                DIFF_ID                     VARCHAR(10),  
                PO_NO                       VARCHAR(40),  
                RULE_TYPE                   VARCHAR(10),  
                GROSS_NEED                  NUMERIC(12),  
                STOCK_ON_HAND               NUMERIC(12),  
                FUTURE_FULFILL_QTY          NUMERIC(12),  
                NET_NEED                    NUMERIC(12),  
                CALC_QTY                    NUMERIC(12),  
                AVAIL_QTY                   NUMERIC(12),  
                ALLOC_QTY                   NUMERIC(12),  
                REMAIN_QTY                  NUMERIC(12),  
                SPREAD_QTY                  NUMERIC(12),  
                SOM_QTY                     NUMERIC(12),  
                PACK_IND                    VARCHAR(1));"
  
  C_temp_tbl2: "CREATE TEMPORARY TABLE IF NOT EXISTS alloc_item_details_temp
                                                (ALLOC_NO                    NUMERIC(15),    
                                                WH_ID                       VARCHAR(40),  
                                                SOURCE_ITEM                 VARCHAR(25),  
                                                SOURCE_ITEM_DESC            VARCHAR(250), 
                                                DIFF_ID                     VARCHAR(10),  
                                                PO_NO                       VARCHAR(40),  
                                                RULE_TYPE                   VARCHAR(10),  
                                                GROSS_NEED                  NUMERIC(12),  
                                                STOCK_ON_HAND               NUMERIC(12),  
                                                FUTURE_FULFILL_QTY          NUMERIC(12),  
                                                NET_NEED                    NUMERIC(12),  
                                                CALC_QTY                    NUMERIC(12),  
                                                AVAIL_QTY                   NUMERIC(12),  
                                                ALLOC_QTY                   NUMERIC(12),  
                                                REMAIN_QTY                  NUMERIC(12),  
                                                SPREAD_QTY                  NUMERIC(12),  
                                                SOM_QTY                     NUMERIC(12));"
  
  C_temp_tbl3: "CREATE TEMPORARY TABLE IF NOT EXISTS alloc_item_loc_dtls_prv_temp
                (ALLOC_NO                    NUMERIC(15),    
                 WH_ID                       VARCHAR(40),  
                 SOURCE_ITEM                 VARCHAR(25),  
                 SOURCE_ITEM_DESC            VARCHAR(250), 
                 DIFF_ID                     VARCHAR(10),  
                 PO_NO                       VARCHAR(40),  
                 LOCATION_ID                 VARCHAR(40),  
                 LOCATION_DESC               VARCHAR(150), 
                 GROUP_ID                    VARCHAR(40),  
                 GROUP_DESC                  VARCHAR(600),
                 ASSIGN_DEFAULT_WH           NUMERIC(10),    
                 RULE_TYPE                   VARCHAR(10),  
                 SOM_QTY                     NUMERIC(20),  
                 GROSS_NEED                  NUMERIC(12),  
                 STOCK_ON_HAND               NUMERIC(12),  
                 FUTURE_FULFILL_QTY          NUMERIC(12),  
                 NET_NEED                    NUMERIC(12),  
                 CALC_QTY                    NUMERIC(12),  
                 ALLOC_QTY                   NUMERIC(12),  
                 VARIANCE_PCT                NUMERIC(12),  
                 SEL_IND                     VARCHAR(1));"
                
  C_temp_tbl4: "CREATE TEMPORARY TABLE IF NOT EXISTS  alloc_item_loc_details_temp
                (ALLOC_NO                    NUMERIC(15),    
                 WH_ID                       VARCHAR(40),  
                 SOURCE_ITEM                 VARCHAR(25),  
                 SOURCE_ITEM_DESC            VARCHAR(250), 
                 DIFF_ID                     VARCHAR(10),  
                 PO_NO                       VARCHAR(40),  
                 LOCATION_ID                 VARCHAR(40),  
                 LOCATION_DESC               VARCHAR(150), 
                 GROUP_ID                    VARCHAR(40),  
                 GROUP_DESC                  VARCHAR(600), 
                 ASSIGN_DEFAULT_WH           NUMERIC(10),    
                 RULE_TYPE                   VARCHAR(10),  
                 SOM_QTY                     NUMERIC(20),  
                 GROSS_NEED                  NUMERIC(12),  
                 STOCK_ON_HAND               NUMERIC(12),  
                 FUTURE_FULFILL_QTY          NUMERIC(12),  
                 NET_NEED                    NUMERIC(12),  
                 CALC_QTY                    NUMERIC(12),  
                 ALLOC_QTY                   NUMERIC(12),  
                 VARIANCE_PCT                NUMERIC(12),  
                 SEL_IND                     VARCHAR(1),   
                 ITEM_PARENT                 VARCHAR(25),  
                 PACK_NO                     VARCHAR(25),  
                 COMP_CALC_QTY               NUMERIC(12));"


  Q_sel_alloc_ctria: "SELECT alloc_criteria FROM alloc_itm_search_dtl WHERE alloc_no = %s  LIMIT 1;"

  Q_sel_level: "SELECT alloc_level FROM alloc_head WHERE alloc_no = %s;"

  L_del_1: "DELETE FROM alloc_item_header_temp
             WHERE alloc_no = %s;"                               
                          
  L_del_2: "DELETE FROM alloc_item_details_temp
             WHERE alloc_no = %s;"
  
  L_del_3: "DELETE FROM alloc_item_loc_dtls_prv_temp
             WHERE alloc_no = %s;"

  L_del_4: "DELETE FROM alloc_item_loc_details_temp
             WHERE alloc_no = %s;"

  L_ins_1: "INSERT INTO alloc_item_loc_dtls_prv_temp (alloc_no,
                                                      wh_id,
                                                      source_item,
                                                      source_item_desc,
                                                      diff_id,
                                                      po_no,
                                                      location_id,
                                                      location_desc,
                                                      GROUP_ID,
                                                      group_desc,
                                                      assign_default_wh,
                                                      rule_type,
                                                      som_qty,
                                                      gross_need,
                                                      stock_on_hand,
                                                      future_fulfill_qty,
                                                      net_need,
                                                      calc_qty,
                                                      alloc_qty,
                                                      variance_pct,
                                                      sel_ind)
                 SELECT alloc_no,
                        wh_id,
                        source_item,
                        source_item_desc,
                        diff_id,
                        po_no,
                        location_id,
                        location_desc,
                        group_id,
                        group_desc,
                        assign_default_wh,
                        rule_type,
                        som_qty,
                        gross_need,
                        stock_on_hand,
                        future_fulfill_qty,
                        net_need,
                        calc_qty,
                        alloc_qty,
                        variance_pct,
                        sel_ind
                   FROM alloc_item_loc_details_temp
                  WHERE alloc_no = %s;"

  Q_ins_dtl_tmp: "INSERT INTO alloc_item_details_temp (alloc_no,
                                                    wh_id,
                                                    source_item,
                                                    source_item_desc,
                                                    diff_id,
                                                    gross_need,
                                                    stock_on_hand,
                                                    future_fulfill_qty,
                                                    net_need,
                                                    calc_qty,
                                                    avail_qty,
                                                    alloc_qty,
                                                    remain_qty,
                                                    som_qty)
									  SELECT DISTINCT
                                             tmp.alloc_no,
                                             tmp.wh_id,
                                             tmp.source_item,
                                             im.item_desc source_item_desc,
                                             tmp.diff_id,
                                             CASE WHEN im.pack_ind = 'N'
                                                 THEN 
                                                   SUM(coalesce(tmp.sku_gross_need_no_own_ship,tmp.gross_need_no_own_ship))  
                                                   OVER(PARTITION BY tmp.alloc_no,
                                                                  tmp.wh_id,
                                                                  tmp.source_item,
                                                                  tmp.diff_id)
                                                 ELSE 
                                                   SUM(tmp.gross_need_no_own_ship)
                                                   OVER(PARTITION BY tmp.alloc_no,
                                                                  tmp.wh_id,
                                                                  tmp.source_item,
                                                                  tmp.diff_id)
                                             END gross_need,
                          NULL
                             stock_on_hand,
                             (SUM( COALESCE (tmp.wh_on_order_qty, 0)
                             + COALESCE(tmp.wh_on_alloc_qty,COALESCE(ils.expected_qty,0))
                                   + COALESCE(ils.shipped_qty,0)
                                  ) 
                             OVER (PARTITION BY tmp.alloc_no,
                                           tmp.wh_id,
                                           tmp.source_item,
                                           tmp.diff_id)/(SELECT count(distinct tmp.to_loc) 
                                                           FROM alloc_calc_item_loc tmp 
                                                          WHERE tmp.alloc_no = %s 
                                                            AND tmp.source_item = im.item 
                                                            AND ils.location=tmp.wh_id  
                                                            AND ils.item=tmp.tran_item 
                                                          GROUP BY tmp.alloc_no,tmp.wh_id,tmp.source_item,tmp.diff_id)
                            )
                             future_fulfill_qty,					 
                          SUM(
                              tmp.gross_need_no_own_ship
                             - COALESCE (tmp.stock_on_hand, 0))
                             OVER (PARTITION BY tmp.alloc_no,
                                           tmp.wh_id,
                                           tmp.source_item,
                                           tmp.diff_id)
                             net_need,
                          SUM(tmp.orig_sku_calc_qty)
                             OVER (PARTITION BY tmp.alloc_no,
                                           tmp.wh_id,
                                           tmp.source_item,
                                           tmp.diff_id)
                             calc_qty,
                          (SELECT SUM(DISTINCT tmp.avail_qty) 
                             FROM alloc_calc_item_loc tmp 
                            WHERE tmp.alloc_no = %s 
                              AND tmp.source_item = im.item 
                              AND ils.location=tmp.wh_id  
                              AND ils.item=tmp.tran_item 
                            GROUP BY tmp.alloc_no,tmp.wh_id,tmp.source_item,tmp.diff_id) avail_qty,					
                          SUM(tmp.sku_calc_qty)
                             OVER (PARTITION BY tmp.alloc_no,
                                           tmp.wh_id,
                                           tmp.source_item,
                                           tmp.diff_id)
                             alloc_qty, 
                           GREATEST((SELECT SUM(DISTINCT tmp.avail_qty)
                                      FROM alloc_calc_item_loc tmp 
                                     WHERE tmp.alloc_no = %s 
                                       AND tmp.source_item = im.item 
                                       AND ils.location=tmp.wh_id  
                                       AND ils.item=tmp.tran_item 
                                     GROUP BY tmp.alloc_no,tmp.wh_id,tmp.source_item,tmp.diff_id)							   
                          - SUM(tmp.sku_calc_qty)
                              OVER (PARTITION BY tmp.alloc_no,
                                            tmp.wh_id,
                                            tmp.source_item,
                                            tmp.diff_id),0)      
                             remain_qty,					 
                          tmp.som_qty
                      FROM alloc_calc_item_loc tmp, 
                           item_dtl im,
                          item_location ils
                     WHERE alloc_no = %s 
                       AND tmp.source_item = im.item
                       AND ils.location=tmp.wh_id 
                       AND ils.item=tmp.tran_item;"

  C_temp_tbl5: "CREATE TEMPORARY TABLE IF NOT EXISTS alloc_item_details_temp_1 
                        AS 
                    SELECT * FROM alloc_item_details_temp WHERE alloc_no=%s;"

  L_mer_1: "WITH 
			    src 
			    AS(SELECT gtt.alloc_no,
                          gtt.wh_id,
                          gtt.source_item,
                          gtt.diff_id,
                          SUM(
                            GREATEST(
                                (GREATEST((ils.item_soh), 0))
                               - (  GREATEST(ils.reserved_qty, 0)
                                + GREATEST(ils.rtv_qty, 0)
                                + GREATEST(ils.non_sellable_qty, 0)
                                + GREATEST(ils.cust_resv_qty, 0)),
                               0))    stock_on_hand                        
                       FROM alloc_item_details_temp_1 gtt,
                            (SELECT DISTINCT alloc_no ,
                                    tran_item,
                                    source_item,
                                    diff_id,
                                    assign_default_wh wh_id
                               FROM alloc_calc_item_loc aacil 
                              WHERE alloc_no = %s) tmp,
                            item_location            ils
                      WHERE gtt.alloc_no = %s
                        AND ils.item = tmp.tran_item
                        AND ils.location = tmp.wh_id
                        AND gtt.source_item = tmp.source_item
                      GROUP BY gtt.alloc_no,
                            gtt.wh_id,
                            gtt.source_item,
                            gtt.diff_id)
              UPDATE alloc_item_details_temp tgt, src 
			    SET tgt.stock_on_hand = src.stock_on_hand
			  WHERE tgt.alloc_no = src.alloc_no
                AND tgt.source_item = src.source_item
                AND COALESCE(tgt.diff_id,'$') = COALESCE(src.diff_id,'$');"


  L_merg_2: "WITH 
			    src 
			    AS(SELECT gtt.alloc_no,
                           gtt.wh_id,
                           gtt.source_item,
                           gtt.diff_id,
                           ff.future_fulfill_qty                        
                       FROM alloc_item_details_temp_1 gtt,
                           (SELECT DISTINCT dr.diff_id,
                                 dr.source_item,
                                 SUM(future_fulfill_qty) 
                                 OVER (PARTITION BY dr.source_item,
                                           dr.diff_id) future_fulfill_qty 
                             FROM (SELECT alloc_no,
                                       assign_default_wh,
                                       source_item,
                                       source_item_desc,
                                       diff_id,
                                       SUM(future_fulfill_qty) future_fulfill_qty                                       
                                   FROM (SELECT DISTINCT tmp.alloc_no,
                                             tmp.assign_default_wh,
                                             tmp.source_item,
                                             im.item_desc source_item_desc,
                                             tmp.diff_id,
                                             tmp.tran_item,
                                             SUM( COALESCE (tmp.wh_on_order_qty, 0)
                                                + COALESCE(ils.expected_qty,0) 
                                                + COALESCE(ils.shipped_qty,0)
                                                ) 
                                             OVER (PARTITION BY tmp.alloc_no,
                                                           tmp.assign_default_wh,
                                                           tmp.source_item,
                                                           tmp.diff_id,
                                                           tran_item)/(SELECT COUNT(DISTINCT tmp.to_loc) 
														                 FROM alloc_calc_item_loc tmp 
																		WHERE alloc_no = %s 
																		  AND tmp.source_item = im.item
																		  AND ils.item=tmp.source_item  
																		  AND ils.location=tmp.assign_default_wh 
																		  AND ils.item=tmp.tran_item 
																		GROUP BY tmp.alloc_no,
																			  tmp.assign_default_wh,
																			  tmp.source_item,
																			  tmp.diff_id,
																			  tran_item) future_fulfill_qty														   
                                         FROM alloc_calc_item_loc tmp,       
                                             item_dtl im,
                                             item_location ils
                                        WHERE alloc_no = %s 
                                          AND tmp.source_item = im.item
                                          AND ils.item=tmp.source_item  
                                          AND ils.location=tmp.assign_default_wh 
                                          AND ils.item=tmp.tran_item) temp
                                    GROUP BY alloc_no,
                                         assign_default_wh,
                                         source_item,
                                         source_item_desc,
                                         diff_id)dr) ff
                      WHERE gtt.alloc_no = %s
                        AND gtt.source_item = ff.source_item
                        AND COALESCE(gtt.diff_id,'$') = COALESCE(ff.diff_id,'$'))
                   UPDATE alloc_item_details_temp tgt, src 
				      SET tgt.future_fulfill_qty = src.future_fulfill_qty,
                          tgt.WH_ID = NULL
					WHERE tgt.alloc_no = src.alloc_no
                      AND tgt.source_item = src.source_item
                      AND COALESCE(tgt.diff_id,'$') = COALESCE(src.diff_id,'$');"

  

  L_merg_3: "WITH 
			 src 
			   AS(SELECT gtt.alloc_no,
                         gtt.wh_id,
                         gtt.source_item,
                         gtt.diff_id,
                         SUM(
                             GREATEST (
                                   (GREATEST ((ils.item_soh), 0))
                                 - (  GREATEST (ils.reserved_qty, 0)
                                    + GREATEST (ils.rtv_qty, 0)
                                    + GREATEST (ils.non_sellable_qty, 0)
                                    + GREATEST (ils.cust_resv_qty, 0)),
                                 0))    stock_on_hand
                    FROM alloc_item_details_temp_1 gtt,
                         item_location            ils
                   WHERE gtt.alloc_no = %s
                     AND ils.item = gtt.source_item
                     AND ils.location = gtt.wh_id
                   GROUP BY gtt.alloc_no,
                         gtt.wh_id,
                         gtt.source_item,
                         gtt.diff_id)
          UPDATE alloc_item_details_temp tgt, src
			 SET tgt.stock_on_hand = src.stock_on_hand
		   WHERE tgt.alloc_no = src.alloc_no
             AND tgt.wh_id = src.wh_id
             AND tgt.source_item = src.source_item
             AND COALESCE(tgt.diff_id,'$') = COALESCE(src.diff_id,'$')"

  L_ins_2: "INSERT INTO alloc_item_header_temp (alloc_no,
                                             source_item,
                                             source_item_desc,
                                             diff_id,
                                             gross_need,
                                             stock_on_hand,
                                             future_fulfill_qty,
                                             net_need,
                                             calc_qty,
                                             avail_qty,
                                             alloc_qty,
                                             remain_qty,
                                             som_qty)
                                      SELECT alloc_no,
                                             source_item,
                                             MAX(source_item_desc)       source_item_desc,
                                             diff_id,
                                             SUM(gross_need)             gross_need,
                                             SUM(stock_on_hand)          stock_on_hand,
                                             SUM(future_fulfill_qty)     future_fulfill_qty,
                                             SUM(net_need)               net_need,
                                             SUM(calc_qty)               calc_qty,
                                             SUM(avail_qty)              avail_qty,
                                             SUM(alloc_qty)              alloc_qty,
                                             SUM(remain_qty)             remain_qty,
                                             MAX(som_qty)                som_qty
                                          FROM alloc_item_details_temp
                                           WHERE alloc_no = %s
                                        GROUP BY alloc_no, source_item, diff_id;"

  L_temp_dup_tbl1: "CREATE TEMPORARY TABLE IF NOT EXISTS alloc_item_header_temp1 
                        AS 
                           SELECT * FROM alloc_item_header_temp WHERE alloc_no=%s;"

  L_merg_4: "WITH src AS
               (SELECT DISTINCT gtt.alloc_no,
                         gtt.source_item,                          
                            im.pack_ind
                       FROM alloc_item_header_temp1 gtt,
                            item_dtl im
                      WHERE gtt.alloc_no = %s 
                        AND gtt.source_item = im.item
                        AND im.pack_ind = 'Y')
             update  alloc_item_header_temp tgt,src
			  SET tgt.pack_ind =  'Y'
              where tgt.alloc_no = src.alloc_no
               AND tgt.source_item = src.source_item;"

  Q_drop_temp_dup_tbl1: "DROP TABLE alloc_item_header_temp1;"

  Q_ins_pck_dtl: "INSERT INTO alloc_item_loc_details_temp (alloc_no,
                                                 wh_id,
                                                 po_no,
                                                 location_id,
                                                 location_desc,
                                                 GROUP_ID,
                                                 group_desc,
                                                 assign_default_wh,
                                                 source_item,
                                                 source_item_desc,
                                                 diff_id,
                                                 som_qty,
                                                 gross_need,
                                                 stock_on_hand,
                                                 future_fulfill_qty,
                                                 net_need,
                                                 calc_qty,
                                                 comp_calc_qty,
                                                 alloc_qty,
                                                 variance_pct,
                                                 sel_ind,
                                                 item_parent)
                        SELECT temp.alloc_no                    alloc_no,
                           temp.wh_id                       wh_id,
                           temp.order_no                    order_no,
                           temp.to_loc                       location_id,
                           lc.location_desc   				  location_desc,
                           CASE WHEN lg.group_type = '7' THEN NULL ELSE lg.group_id END group_id,
                           CASE WHEN lg.group_type = '7' THEN NULL ELSE lg.group_desc END group_desc,
                           temp.assign_default_wh           assign_default_wh,     
                           temp.source_item                 source_item,
                           temp.source_item_desc            source_item_desc,      
                           temp.diff_id                     diff_id,   
                           temp.som_qty                     som_qty,
                           temp.sku_gross_need_no_own_ship  sku_gross_need_no_own_ship,
                           temp.stock_on_hand               stock_on_hand,
                           coalesce(temp.on_order + temp.on_alloc + temp.in_transit_qty,0) future_fulfill_qty,
                           coalesce(temp.sku_gross_need_no_own_ship - temp.stock_on_hand - (temp.on_order + temp.on_alloc + temp.in_transit_qty),0) net_need,
                           temp.orig_sku_calc_qty                calc_qty,    
                           temp.comp_calc_qty               comp_calc_qty,    
                           temp.sku_calc_qty               alloc_qty,        
                           coalesce(((temp.orig_sku_calc_qty-temp.comp_calc_qty+temp.sku_calc_qty)  
                              - (temp.sku_gross_need_no_own_ship
                              - coalesce(temp.stock_on_hand, 0)
                              - coalesce(temp.on_order + temp.on_alloc + temp.in_transit_qty,0))
                             )/ NULLIF ( (temp.sku_gross_need_no_own_ship),0)* 100,0) variance_pct,
                           'Y'                              sel_ind,
                           temp.item_parent                 item_parent
                          FROM (SELECT tmp.alloc_no         alloc_no,
                                  tmp.wh_id                 wh_id,
                                  tmp.source_item           source_item,
                                  tmp.diff_id               diff_id,
                                  tmp.order_no              order_no,
                                  tmp.to_loc                to_loc,
                                  tmp.assign_default_wh     assign_default_wh,
                                  tmp.source_item_desc      source_item_desc,
                                  MAX(tmp.som_qty)          som_qty,
                                  tmp.item_parent        	 item_parent,
                                  (CASE WHEN MAX(tmp.sku_gross_need_no_own_ship_1) = 0
                                        THEN MAX(tmp.sku_gross_need_no_own_ship_2)
                                        ELSE MAX(tmp.sku_gross_need_no_own_ship_1)
                                  END)     sku_gross_need_no_own_ship,    
                                  MAX(tmp.stock_on_hand)              stock_on_hand,         
                                  MAX(tmp.on_order)                   on_order,
                                  MAX(tmp.on_alloc)                   on_alloc,
                                  MAX(tmp.in_transit_qty)             in_transit_qty,
                                  SUM(tmp.sku_calc_qty)               sku_calc_qty,
                                  SUM(tmp.comp_calc_qty)              comp_calc_qty,
                                  SUM(tmp.orig_sku_calc_qty)          orig_sku_calc_qty               
		                 FROM (SELECT tmp.alloc_no,
		                			   tmp.wh_id,
		                			   tmp.source_item,
		                			   tmp.diff_id,
		                			   tmp.order_no,
		                			   tmp.to_loc,
		                			   tmp.assign_default_wh assign_default_wh,
		                			   im.item_desc source_item_desc,
		                			   tmp.som_qty som_qty,
		                			   im.item_parent                 item_parent,
                                        CASE WHEN im.pack_ind = 'Y' AND im.sellable_ind = 'Y'
                                             THEN tmp.gross_need_no_own_ship
                                      ELSE coalesce(tmp.sku_gross_need_no_own_ship,tmp.gross_need_no_own_ship) 
                                        END sku_gross_need_no_own_ship_1,   
                                        0 sku_gross_need_no_own_ship_2,     
                                        GREATEST (coalesce (tmp.stock_on_hand, 0),
                                          - coalesce(tmp.on_order, 0)
                                          - coalesce(tmp.on_alloc, 0)
                                          - coalesce(tmp.IN_TRANSIT_QTY, 0),
                                          0) stock_on_hand,
                                        tmp.on_order,
                                        tmp.on_alloc,
                                        tmp.in_transit_qty,
                                        tmp.sku_calc_qty,
                                        tmp.orig_sku_calc_qty comp_calc_qty,  
                                        tmp.orig_sku_calc_qty,
                                        1 label
                                       FROM alloc_calc_item_loc  tmp,
                                            item_dtl              im
                                      WHERE tmp.alloc_no    = %s                    
                                        AND tmp.source_item = im.item
                                        AND NOT (im.pack_ind = 'Y' AND im.sellable_ind = 'N')
                                    UNION ALL
                                    SELECT tmp.alloc_no,
                                           tmp.wh_id,
                                           pb.item,
                                           aaim.aggr_diff_id diff_id,
                                           tmp.order_no,
                                           tmp.to_loc,
                                     tmp.assign_default_wh assign_default_wh,
                                     im1.item_desc source_item_desc,
                                     1 som_qty,
                                     im1.item_parent       item_parent,
                                     0 gross_need_no_own_ship_1,                                    
                                    MAX(ils.gross_need) gross_need_no_own_ship_2, 
                                     MAX(ils.stock_on_hand) stock_on_hand,                                                                       
                                     MAX(ils.on_order) on_order,
                                     MAX(ils.on_alloc) on_alloc,
                                     MAX(ils.in_transit_qty) in_transit_qty,
                                     0 sku_calc_qty,
                                     0 comp_calc_qty,
                                     SUM(tmp.sku_calc_qty*pb.ITEM_QTY),        
		                					2 label
                                 FROM alloc_calc_item_loc  tmp,
                                      packitem_breakout    pb,
                                      item_dtl             im,
                                      item_dtl             im1,
                                      item_dtl             aaim,
                                      alloc_comp_inv       ils     
		                		WHERE tmp.alloc_no    = %s
                                 AND tmp.source_item = im.item
                                 AND pb.item         = im1.item
                                 AND im1.item        = aaim.item
                                 AND tmp.source_item = pb.pack_no
                                 AND (im.pack_ind = 'Y' AND im.sellable_ind = 'N' AND im.orderable_ind = 'Y')
                                 AND pb.item = ils.tran_item
                                 AND ils.to_loc = tmp.to_loc
                                 AND ils.alloc_no = tmp.alloc_no
                                 GROUP BY tmp.alloc_no,
                                       tmp.wh_id,
                                       pb.item,
                                       aaim.aggr_diff_id ,
                                       tmp.order_no,
                                       tmp.to_loc,
                                       tmp.assign_default_wh ,
                                       im1.item_desc ,
                                       im1.item_parent) tmp
                                GROUP BY tmp.alloc_no,
                                         tmp.wh_id,
                                         tmp.source_item,
                                         tmp.diff_id,
                                         tmp.order_no,
                                         tmp.to_loc,
                                         tmp.assign_default_wh,
                                         tmp.source_item_desc,
                                         tmp.item_parent)temp,
                               alloc_loc_group_detail        lg,
                               alloc_location                lc
                        WHERE lg.alloc_no     = temp.alloc_no
                          AND lc.loc_group_id = lg.loc_group_id
                          AND lc.location_id  = temp.to_loc
                          AND lc.group_id     = lg.group_id;"

  Q_merg_ind: "WITH src AS
               (SELECT DISTINCT alloc_no,
                                wh_id,
                                po_no,
                                location_id,
                                source_item,
                                diff_id,
                                sel_ind
                  FROM alloc_item_loc_dtls_prv_temp
                 WHERE alloc_no = %s)
            UPDATE alloc_item_loc_details_temp tgt, src
               SET tgt.sel_ind = src.sel_ind 
             WHERE  tgt.alloc_no = src.alloc_no
               AND tgt.wh_id = src.wh_id
               AND coalesce (tgt.po_no, '$') = coalesce (src.po_no, coalesce (tgt.po_no, '$'))
               AND tgt.location_id = src.location_id
               AND tgt.source_item = src.source_item
               AND coalesce(tgt.diff_id,'$') = coalesce(src.diff_id,'$');"


  Q_upd_ind: "UPDATE alloc_item_header_temp SET pack_ind='N' WHERE alloc_no = %s;"

  Q_item_hdr_data: " SELECT * FROM alloc_item_header_temp WHERE alloc_no = %s; "

  Q_item_loc_data: " SELECT * FROM alloc_item_loc_details_temp WHERE alloc_no = %s; "

  Q_item_dtls_data: " SELECT * FROM alloc_item_details_temp WHERE alloc_no = %s; "


